/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.hrdb.service.HrdbQueryExecutorService;
import com.hrdb.models.query.*;

@RestController(value = "Hrdb.QueryExecutionController")
@RequestMapping("/hrdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private HrdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/NoOfEmployee", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<NoOfEmployeeResponse> executeNoOfEmployee(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: NoOfEmployee");
        Page<NoOfEmployeeResponse> _result = queryService.executeNoOfEmployee(pageable);
        LOGGER.debug("got the result for named query: NoOfEmployee, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query NoOfEmployee")
    @RequestMapping(value = "/queries/NoOfEmployee/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNoOfEmployee(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: NoOfEmployee");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "NoOfEmployee";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportNoOfEmployee( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SelectedEmployeeID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SelectedEmployeeIdResponse> executeSelectedEmployeeID(@RequestParam(value = "data") Integer data, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SelectedEmployeeID");
        Page<SelectedEmployeeIdResponse> _result = queryService.executeSelectedEmployeeID(data, pageable);
        LOGGER.debug("got the result for named query: SelectedEmployeeID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SelectedEmployeeID")
    @RequestMapping(value = "/queries/SelectedEmployeeID/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSelectedEmployeeID(@RequestParam(value = "data") Integer data, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SelectedEmployeeID");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SelectedEmployeeID";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSelectedEmployeeID(data,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/noOfDepartments", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<NoOfDepartmentsResponse> executeNoOfDepartments(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: noOfDepartments");
        Page<NoOfDepartmentsResponse> _result = queryService.executeNoOfDepartments(pageable);
        LOGGER.debug("got the result for named query: noOfDepartments, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query noOfDepartments")
    @RequestMapping(value = "/queries/noOfDepartments/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNoOfDepartments(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: noOfDepartments");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "noOfDepartments";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportNoOfDepartments( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/EngineeringEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<EngineeringEmployeesResponse> executeEngineeringEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: EngineeringEmployees");
        Page<EngineeringEmployeesResponse> _result = queryService.executeEngineeringEmployees(pageable);
        LOGGER.debug("got the result for named query: EngineeringEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query EngineeringEmployees")
    @RequestMapping(value = "/queries/EngineeringEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportEngineeringEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: EngineeringEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "EngineeringEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportEngineeringEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/ProfessionalServicesEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<ProfessionalServicesEmployeesResponse> executeProfessionalServicesEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ProfessionalServicesEmployees");
        Page<ProfessionalServicesEmployeesResponse> _result = queryService.executeProfessionalServicesEmployees(pageable);
        LOGGER.debug("got the result for named query: ProfessionalServicesEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query ProfessionalServicesEmployees")
    @RequestMapping(value = "/queries/ProfessionalServicesEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportProfessionalServicesEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: ProfessionalServicesEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "ProfessionalServicesEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportProfessionalServicesEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/SalesEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<SalesEmployeesResponse> executeSalesEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SalesEmployees");
        Page<SalesEmployeesResponse> _result = queryService.executeSalesEmployees(pageable);
        LOGGER.debug("got the result for named query: SalesEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query SalesEmployees")
    @RequestMapping(value = "/queries/SalesEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSalesEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: SalesEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "SalesEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportSalesEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/GeneralAndAdminEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<GeneralAndAdminEmployeesResponse> executeGeneralAndAdminEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: GeneralAndAdminEmployees");
        Page<GeneralAndAdminEmployeesResponse> _result = queryService.executeGeneralAndAdminEmployees(pageable);
        LOGGER.debug("got the result for named query: GeneralAndAdminEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query GeneralAndAdminEmployees")
    @RequestMapping(value = "/queries/GeneralAndAdminEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGeneralAndAdminEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: GeneralAndAdminEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "GeneralAndAdminEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGeneralAndAdminEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/MarketingEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<MarketingEmployeesResponse> executeMarketingEmployees(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: MarketingEmployees");
        Page<MarketingEmployeesResponse> _result = queryService.executeMarketingEmployees(pageable);
        LOGGER.debug("got the result for named query: MarketingEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query MarketingEmployees")
    @RequestMapping(value = "/queries/MarketingEmployees/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportMarketingEmployees(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: MarketingEmployees");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "MarketingEmployees";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportMarketingEmployees( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/NoOfDepartment", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<NoOfDepartmentResponse> executeNoOfDepartment(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: NoOfDepartment");
        Page<NoOfDepartmentResponse> _result = queryService.executeNoOfDepartment(pageable);
        LOGGER.debug("got the result for named query: NoOfDepartment, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query NoOfDepartment")
    @RequestMapping(value = "/queries/NoOfDepartment/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNoOfDepartment(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: NoOfDepartment");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "NoOfDepartment";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportNoOfDepartment( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/TotalBudget", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "No description is provided")
    public Page<TotalBudgetResponse> executeTotalBudget(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: TotalBudget");
        Page<TotalBudgetResponse> _result = queryService.executeTotalBudget(pageable);
        LOGGER.debug("got the result for named query: TotalBudget, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query TotalBudget")
    @RequestMapping(value = "/queries/TotalBudget/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTotalBudget(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: TotalBudget");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "TotalBudget";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportTotalBudget( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}