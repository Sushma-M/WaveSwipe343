/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.hrdb.models.query.*;

@Service
public class HrdbQueryExecutorServiceImpl implements HrdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HrdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("hrdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<NoOfEmployeeResponse> executeNoOfEmployee(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("NoOfEmployee", params, NoOfEmployeeResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportNoOfEmployee(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<NoOfEmployeeResponse> queryInput = new QueryProcedureInput<>("NoOfEmployee", params, NoOfEmployeeResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<SelectedEmployeeIdResponse> executeSelectedEmployeeID(Integer data, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("data", data);

        return queryExecutor.executeNamedQuery("SelectedEmployeeID", params, SelectedEmployeeIdResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSelectedEmployeeID(Integer data, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("data", data);

        QueryProcedureInput<SelectedEmployeeIdResponse> queryInput = new QueryProcedureInput<>("SelectedEmployeeID", params, SelectedEmployeeIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<NoOfDepartmentsResponse> executeNoOfDepartments(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("noOfDepartments", params, NoOfDepartmentsResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportNoOfDepartments(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<NoOfDepartmentsResponse> queryInput = new QueryProcedureInput<>("noOfDepartments", params, NoOfDepartmentsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<EngineeringEmployeesResponse> executeEngineeringEmployees(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("EngineeringEmployees", params, EngineeringEmployeesResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportEngineeringEmployees(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<EngineeringEmployeesResponse> queryInput = new QueryProcedureInput<>("EngineeringEmployees", params, EngineeringEmployeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<ProfessionalServicesEmployeesResponse> executeProfessionalServicesEmployees(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("ProfessionalServicesEmployees", params, ProfessionalServicesEmployeesResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportProfessionalServicesEmployees(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<ProfessionalServicesEmployeesResponse> queryInput = new QueryProcedureInput<>("ProfessionalServicesEmployees", params, ProfessionalServicesEmployeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<SalesEmployeesResponse> executeSalesEmployees(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SalesEmployees", params, SalesEmployeesResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSalesEmployees(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<SalesEmployeesResponse> queryInput = new QueryProcedureInput<>("SalesEmployees", params, SalesEmployeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<GeneralAndAdminEmployeesResponse> executeGeneralAndAdminEmployees(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("GeneralAndAdminEmployees", params, GeneralAndAdminEmployeesResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGeneralAndAdminEmployees(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GeneralAndAdminEmployeesResponse> queryInput = new QueryProcedureInput<>("GeneralAndAdminEmployees", params, GeneralAndAdminEmployeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<MarketingEmployeesResponse> executeMarketingEmployees(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("MarketingEmployees", params, MarketingEmployeesResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportMarketingEmployees(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<MarketingEmployeesResponse> queryInput = new QueryProcedureInput<>("MarketingEmployees", params, MarketingEmployeesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<NoOfDepartmentResponse> executeNoOfDepartment(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("NoOfDepartment", params, NoOfDepartmentResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportNoOfDepartment(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<NoOfDepartmentResponse> queryInput = new QueryProcedureInput<>("NoOfDepartment", params, NoOfDepartmentResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "hrdbTransactionManager", readOnly = true)
    @Override
    public Page<TotalBudgetResponse> executeTotalBudget(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("TotalBudget", params, TotalBudgetResponse.class, pageable);
    }

    @Transactional(value = "hrdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTotalBudget(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<TotalBudgetResponse> queryInput = new QueryProcedureInput<>("TotalBudget", params, TotalBudgetResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}